{"level":"error","message":"\nInvalid `prisma.user.findUnique()` invocation:\n\n{\n  where: {\n    username: \"admin\",\n?   id?: Int,\n?   AND?: UserWhereInput | UserWhereInput[],\n?   OR?: UserWhereInput[],\n?   NOT?: UserWhereInput | UserWhereInput[],\n?   password?: StringFilter | String,\n?   role?: BoolFilter | Boolean,\n?   session?: StringFilter | String\n  }\n}\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. \nInvalid `prisma.user.findUnique()` invocation:\n\n{\n  where: {\n    username: \"admin\",\n?   id?: Int,\n?   AND?: UserWhereInput | UserWhereInput[],\n?   OR?: UserWhereInput[],\n?   NOT?: UserWhereInput | UserWhereInput[],\n?   password?: StringFilter | String,\n?   role?: BoolFilter | Boolean,\n?   session?: StringFilter | String\n  }\n}\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.","target":"user.findUnique","timestamp":"2025-02-14T16:56:09.198Z"}
{"level":"error","message":"\nInvalid `prisma.user.findUnique()` invocation:\n\n{\n  where: {\n    username: \"admin\",\n    password: \"admin\",\n?   id?: Int,\n?   AND?: UserWhereInput | UserWhereInput[],\n?   OR?: UserWhereInput[],\n?   NOT?: UserWhereInput | UserWhereInput[],\n?   role?: BoolFilter | Boolean,\n?   session?: StringFilter | String\n  }\n}\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. \nInvalid `prisma.user.findUnique()` invocation:\n\n{\n  where: {\n    username: \"admin\",\n    password: \"admin\",\n?   id?: Int,\n?   AND?: UserWhereInput | UserWhereInput[],\n?   OR?: UserWhereInput[],\n?   NOT?: UserWhereInput | UserWhereInput[],\n?   role?: BoolFilter | Boolean,\n?   session?: StringFilter | String\n  }\n}\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.","target":"user.findUnique","timestamp":"2025-02-14T17:00:01.845Z"}
{"level":"error","message":"\nInvalid `prisma.user.update()` invocation:\n\n\nError occurred during query execution:\nConnectorError(ConnectorError { user_facing_error: None, kind: QueryError(PostgresError { code: \"55000\", message: \"cannot update table \\\"User\\\" because it does not have a replica identity and publishes updates\", severity: \"ERROR\", detail: None, column: None, hint: Some(\"To enable updating the table, set REPLICA IDENTITY using ALTER TABLE.\") }), transient: false }) \nInvalid `prisma.user.update()` invocation:\n\n\nError occurred during query execution:\nConnectorError(ConnectorError { user_facing_error: None, kind: QueryError(PostgresError { code: \"55000\", message: \"cannot update table \\\"User\\\" because it does not have a replica identity and publishes updates\", severity: \"ERROR\", detail: None, column: None, hint: Some(\"To enable updating the table, set REPLICA IDENTITY using ALTER TABLE.\") }), transient: false })","target":"user.update","timestamp":"2025-02-15T01:45:05.325Z"}
{"level":"error","message":"\nInvalid `prisma.user.update()` invocation:\n\n{\n  where: {\n    username: \"admintest\",\n?   id?: Int,\n?   AND?: UserWhereInput | UserWhereInput[],\n?   OR?: UserWhereInput[],\n?   NOT?: UserWhereInput | UserWhereInput[],\n?   password?: StringFilter | String,\n?   role?: BoolFilter | Boolean,\n?   session?: StringFilter | String\n  },\n  data: {\n    id: 2,\n    username: \"admintest\",\n    password: \"adnim123\",\n    role: false,\n    session: \"aaa3b590-eb3e-11ef-9411-9b8c891eff57\"\n  }\n}\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. \nInvalid `prisma.user.update()` invocation:\n\n{\n  where: {\n    username: \"admintest\",\n?   id?: Int,\n?   AND?: UserWhereInput | UserWhereInput[],\n?   OR?: UserWhereInput[],\n?   NOT?: UserWhereInput | UserWhereInput[],\n?   password?: StringFilter | String,\n?   role?: BoolFilter | Boolean,\n?   session?: StringFilter | String\n  },\n  data: {\n    id: 2,\n    username: \"admintest\",\n    password: \"adnim123\",\n    role: false,\n    session: \"aaa3b590-eb3e-11ef-9411-9b8c891eff57\"\n  }\n}\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.","target":"user.update","timestamp":"2025-02-15T01:46:25.831Z"}
{"level":"error","message":"\nInvalid `prisma.user.update()` invocation:\n\n{\n  where: {\n    username: \"admintest\",\n?   id?: Int,\n?   AND?: UserWhereInput | UserWhereInput[],\n?   OR?: UserWhereInput[],\n?   NOT?: UserWhereInput | UserWhereInput[],\n?   password?: StringFilter | String,\n?   role?: BoolFilter | Boolean,\n?   session?: StringFilter | String\n  },\n  data: {\n    session: \"cc66bec0-eb3e-11ef-b56b-a7579bb136f7\"\n  }\n}\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. \nInvalid `prisma.user.update()` invocation:\n\n{\n  where: {\n    username: \"admintest\",\n?   id?: Int,\n?   AND?: UserWhereInput | UserWhereInput[],\n?   OR?: UserWhereInput[],\n?   NOT?: UserWhereInput | UserWhereInput[],\n?   password?: StringFilter | String,\n?   role?: BoolFilter | Boolean,\n?   session?: StringFilter | String\n  },\n  data: {\n    session: \"cc66bec0-eb3e-11ef-b56b-a7579bb136f7\"\n  }\n}\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.","target":"user.update","timestamp":"2025-02-15T01:47:22.749Z"}
{"level":"error","message":"\nInvalid `prisma.user.update()` invocation:\n\n\nError occurred during query execution:\nConnectorError(ConnectorError { user_facing_error: None, kind: QueryError(PostgresError { code: \"55000\", message: \"cannot update table \\\"User\\\" because it does not have a replica identity and publishes updates\", severity: \"ERROR\", detail: None, column: None, hint: Some(\"To enable updating the table, set REPLICA IDENTITY using ALTER TABLE.\") }), transient: false }) \nInvalid `prisma.user.update()` invocation:\n\n\nError occurred during query execution:\nConnectorError(ConnectorError { user_facing_error: None, kind: QueryError(PostgresError { code: \"55000\", message: \"cannot update table \\\"User\\\" because it does not have a replica identity and publishes updates\", severity: \"ERROR\", detail: None, column: None, hint: Some(\"To enable updating the table, set REPLICA IDENTITY using ALTER TABLE.\") }), transient: false })","target":"user.update","timestamp":"2025-02-15T01:49:52.770Z"}
{"level":"error","message":"\nInvalid `prisma.user.update()` invocation:\n\n{\n  where: {\n    session: \"e064bca0-eb3f-11ef-aa40-a7b2ec9ae1c6\"\n  },\n  data: {\n+   session: String\n  },\n  select: {\n    username: true\n  }\n}\n\nArgument `session` must not be null. \nInvalid `prisma.user.update()` invocation:\n\n{\n  where: {\n    session: \"e064bca0-eb3f-11ef-aa40-a7b2ec9ae1c6\"\n  },\n  data: {\n+   session: String\n  },\n  select: {\n    username: true\n  }\n}\n\nArgument `session` must not be null.","target":"user.update","timestamp":"2025-02-15T02:03:17.212Z"}
{"level":"error","message":"\nInvalid `prisma.user.update()` invocation:\n\n{\n  where: {\n    session: \"e064bca0-eb3f-11ef-aa40-a7b2ec9ae1c6\",\n?   id?: Int,\n?   AND?: UserWhereInput | UserWhereInput[],\n?   OR?: UserWhereInput[],\n?   NOT?: UserWhereInput | UserWhereInput[],\n?   username?: StringFilter | String,\n?   password?: StringFilter | String,\n?   role?: BoolFilter | Boolean\n  },\n  data: {\n    session: \"\"\n  },\n  select: {\n    username: true\n  }\n}\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. \nInvalid `prisma.user.update()` invocation:\n\n{\n  where: {\n    session: \"e064bca0-eb3f-11ef-aa40-a7b2ec9ae1c6\",\n?   id?: Int,\n?   AND?: UserWhereInput | UserWhereInput[],\n?   OR?: UserWhereInput[],\n?   NOT?: UserWhereInput | UserWhereInput[],\n?   username?: StringFilter | String,\n?   password?: StringFilter | String,\n?   role?: BoolFilter | Boolean\n  },\n  data: {\n    session: \"\"\n  },\n  select: {\n    username: true\n  }\n}\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.","target":"user.update","timestamp":"2025-02-15T02:03:47.106Z"}
{"level":"error","message":"\nInvalid `prisma.user.update()` invocation:\n\n{\n  where: {\n    username: \"admintest\",\n?   id?: Int,\n?   AND?: UserWhereInput | UserWhereInput[],\n?   OR?: UserWhereInput[],\n?   NOT?: UserWhereInput | UserWhereInput[],\n?   password?: StringFilter | String,\n?   role?: BoolFilter | Boolean,\n?   session?: StringFilter | String\n  },\n  data: {\n    session: \"\"\n  },\n  select: {\n    username: true\n  }\n}\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. \nInvalid `prisma.user.update()` invocation:\n\n{\n  where: {\n    username: \"admintest\",\n?   id?: Int,\n?   AND?: UserWhereInput | UserWhereInput[],\n?   OR?: UserWhereInput[],\n?   NOT?: UserWhereInput | UserWhereInput[],\n?   password?: StringFilter | String,\n?   role?: BoolFilter | Boolean,\n?   session?: StringFilter | String\n  },\n  data: {\n    session: \"\"\n  },\n  select: {\n    username: true\n  }\n}\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.","target":"user.update","timestamp":"2025-02-15T02:05:28.533Z"}
{"level":"error","message":"\nInvalid `prisma.user.update()` invocation:\n\n{\n  where: {\n    username: \"admintest\",\n?   id?: Int,\n?   AND?: UserWhereInput | UserWhereInput[],\n?   OR?: UserWhereInput[],\n?   NOT?: UserWhereInput | UserWhereInput[],\n?   password?: StringFilter | String,\n?   role?: BoolFilter | Boolean,\n?   session?: StringFilter | String\n  },\n  data: {\n    session: undefined\n  },\n  select: {\n    username: true\n  }\n}\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?. \nInvalid `prisma.user.update()` invocation:\n\n{\n  where: {\n    username: \"admintest\",\n?   id?: Int,\n?   AND?: UserWhereInput | UserWhereInput[],\n?   OR?: UserWhereInput[],\n?   NOT?: UserWhereInput | UserWhereInput[],\n?   password?: StringFilter | String,\n?   role?: BoolFilter | Boolean,\n?   session?: StringFilter | String\n  },\n  data: {\n    session: undefined\n  },\n  select: {\n    username: true\n  }\n}\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id` arguments. Available options are marked with ?.","target":"user.update","timestamp":"2025-02-15T02:05:51.976Z"}
{"level":"error","message":"\nInvalid `prisma.user.update()` invocation:\n\n{\n  where: {\n    username: 1\n  },\n  data: {\n+   session: String\n  },\n  select: {\n    username: true\n  }\n}\n\nArgument `session` must not be null. \nInvalid `prisma.user.update()` invocation:\n\n{\n  where: {\n    username: 1\n  },\n  data: {\n+   session: String\n  },\n  select: {\n    username: true\n  }\n}\n\nArgument `session` must not be null.","target":"user.update","timestamp":"2025-02-15T02:07:37.220Z"}
{"level":"error","message":"\nInvalid `prisma.user.update()` invocation:\n\n{\n  where: {\n    username: 1\n              ~\n  },\n  data: {\n    session: undefined\n  },\n  select: {\n    username: true\n  }\n}\n\nArgument `username`: Invalid value provided. Expected StringFilter or String, provided Int. \nInvalid `prisma.user.update()` invocation:\n\n{\n  where: {\n    username: 1\n              ~\n  },\n  data: {\n    session: undefined\n  },\n  select: {\n    username: true\n  }\n}\n\nArgument `username`: Invalid value provided. Expected StringFilter or String, provided Int.","target":"user.update","timestamp":"2025-02-15T02:08:00.991Z"}
{"level":"error","message":"\nInvalid `prisma.user.update()` invocation:\n\n{\n  where: {\n    username: 1\n              ~\n  },\n  data: {\n    session: \"\"\n  },\n  select: {\n    username: true\n  }\n}\n\nArgument `username`: Invalid value provided. Expected StringFilter or String, provided Int. \nInvalid `prisma.user.update()` invocation:\n\n{\n  where: {\n    username: 1\n              ~\n  },\n  data: {\n    session: \"\"\n  },\n  select: {\n    username: true\n  }\n}\n\nArgument `username`: Invalid value provided. Expected StringFilter or String, provided Int.","target":"user.update","timestamp":"2025-02-15T02:08:34.422Z"}
{"level":"error","message":"\nInvalid `prisma.profile.create()` invocation:\n\n{\n  data: {\n    username: \"admin123\",\n+   image: String\n  }\n}\n\nArgument `image` is missing. \nInvalid `prisma.profile.create()` invocation:\n\n{\n  data: {\n    username: \"admin123\",\n+   image: String\n  }\n}\n\nArgument `image` is missing.","target":"profile.create","timestamp":"2025-02-15T10:58:36.001Z"}
{"level":"error","message":"\nInvalid `prisma.profile.create()` invocation:\n\n{\n  data: {\n    username: \"123\",\n+   image: String\n  }\n}\n\nArgument `image` is missing. \nInvalid `prisma.profile.create()` invocation:\n\n{\n  data: {\n    username: \"123\",\n+   image: String\n  }\n}\n\nArgument `image` is missing.","target":"profile.create","timestamp":"2025-02-15T11:00:24.122Z"}
{"level":"error","message":"\nInvalid `prisma.profile.create()` invocation:\n\n{\n  data: {\n    username: \"12\",\n+   image: String\n  }\n}\n\nArgument `image` is missing. \nInvalid `prisma.profile.create()` invocation:\n\n{\n  data: {\n    username: \"12\",\n+   image: String\n  }\n}\n\nArgument `image` is missing.","target":"profile.create","timestamp":"2025-02-15T11:01:31.755Z"}
{"level":"error","message":"\nInvalid `prisma.user.findFirst()` invocation:\n\n{\n  where: {\n    username: \"admin\"\n  },\n  select: {\n    id: true,\n    username: true,\n    session: true,\n    profile: {\n    ~~~~~~~\n      select: {\n        image: true,\n        description: true\n      }\n    },\n    keranjang: {\n      select: {\n        id: true,\n        keranjangProducts: {\n          select: {\n            productId: true,\n            quantity: true\n          }\n        }\n      }\n    },\n?   password?: true,\n?   role?: true,\n?   Profile?: true,\n?   Keranjang?: true,\n?   Store?: true\n  }\n}\n\nUnknown field `profile` for select statement on model `User`. Available options are marked with ?. \nInvalid `prisma.user.findFirst()` invocation:\n\n{\n  where: {\n    username: \"admin\"\n  },\n  select: {\n    id: true,\n    username: true,\n    session: true,\n    profile: {\n    ~~~~~~~\n      select: {\n        image: true,\n        description: true\n      }\n    },\n    keranjang: {\n      select: {\n        id: true,\n        keranjangProducts: {\n          select: {\n            productId: true,\n            quantity: true\n          }\n        }\n      }\n    },\n?   password?: true,\n?   role?: true,\n?   Profile?: true,\n?   Keranjang?: true,\n?   Store?: true\n  }\n}\n\nUnknown field `profile` for select statement on model `User`. Available options are marked with ?.","target":"user.findFirst","timestamp":"2025-02-15T11:15:13.341Z"}
{"level":"error","message":"\nInvalid `prisma.user.findMany()` invocation:\n\n{\n  where: {\n    username: \"admin\"\n  },\n  select: {\n    id: true,\n    username: true,\n    session: true,\n    profile: {\n    ~~~~~~~\n      select: {\n        image: true,\n        description: true\n      }\n    },\n    keranjang: {\n      select: {\n        id: true,\n        keranjangProducts: {\n          select: {\n            productId: true,\n            quantity: true\n          }\n        }\n      }\n    },\n?   password?: true,\n?   role?: true,\n?   Profile?: true,\n?   Keranjang?: true,\n?   Store?: true\n  }\n}\n\nUnknown field `profile` for select statement on model `User`. Available options are marked with ?. \nInvalid `prisma.user.findMany()` invocation:\n\n{\n  where: {\n    username: \"admin\"\n  },\n  select: {\n    id: true,\n    username: true,\n    session: true,\n    profile: {\n    ~~~~~~~\n      select: {\n        image: true,\n        description: true\n      }\n    },\n    keranjang: {\n      select: {\n        id: true,\n        keranjangProducts: {\n          select: {\n            productId: true,\n            quantity: true\n          }\n        }\n      }\n    },\n?   password?: true,\n?   role?: true,\n?   Profile?: true,\n?   Keranjang?: true,\n?   Store?: true\n  }\n}\n\nUnknown field `profile` for select statement on model `User`. Available options are marked with ?.","target":"user.findMany","timestamp":"2025-02-15T11:15:57.955Z"}
{"level":"error","message":"\nInvalid `prisma.store.create()` invocation:\n\n{\n  userId: \"5dfd922f-abe8-43a6-802a-415bbbccf8f4\",\n  ~~~~~~\n  name: \"warung haji dudung\",\n? data?: StoreCreateInput | StoreUncheckedCreateInput\n}\n\nUnknown argument `userId`. Available options are marked with ?. \nInvalid `prisma.store.create()` invocation:\n\n{\n  userId: \"5dfd922f-abe8-43a6-802a-415bbbccf8f4\",\n  ~~~~~~\n  name: \"warung haji dudung\",\n? data?: StoreCreateInput | StoreUncheckedCreateInput\n}\n\nUnknown argument `userId`. Available options are marked with ?.","target":"store.create","timestamp":"2025-02-15T15:05:11.458Z"}
{"level":"error","message":"\nInvalid `prisma.store.create()` invocation:\n\n{\n  userId: \"5dfd922f-abe8-43a6-802a-415bbbccf8f4\",\n  ~~~~~~\n  name: \"warung haji dudung\",\n? data?: StoreCreateInput | StoreUncheckedCreateInput\n}\n\nUnknown argument `userId`. Available options are marked with ?. \nInvalid `prisma.store.create()` invocation:\n\n{\n  userId: \"5dfd922f-abe8-43a6-802a-415bbbccf8f4\",\n  ~~~~~~\n  name: \"warung haji dudung\",\n? data?: StoreCreateInput | StoreUncheckedCreateInput\n}\n\nUnknown argument `userId`. Available options are marked with ?.","target":"store.create","timestamp":"2025-02-15T15:07:18.166Z"}
{"level":"error","message":"\nInvalid `prisma.store.create()` invocation:\n\n{\n  userId: \"5dfd922f-abe8-43a6-802a-415bbbccf8f4\",\n  ~~~~~~\n  name: \"warung haji dudung\",\n? data?: StoreCreateInput | StoreUncheckedCreateInput\n}\n\nUnknown argument `userId`. Available options are marked with ?. \nInvalid `prisma.store.create()` invocation:\n\n{\n  userId: \"5dfd922f-abe8-43a6-802a-415bbbccf8f4\",\n  ~~~~~~\n  name: \"warung haji dudung\",\n? data?: StoreCreateInput | StoreUncheckedCreateInput\n}\n\nUnknown argument `userId`. Available options are marked with ?.","target":"store.create","timestamp":"2025-02-15T15:08:22.592Z"}
{"level":"error","message":"\nInvalid `prisma.store.create()` invocation:\n\n\nUnique constraint failed on the fields: (`userId`) \nInvalid `prisma.store.create()` invocation:\n\n\nUnique constraint failed on the fields: (`userId`)","target":"store.create","timestamp":"2025-02-15T15:12:21.736Z"}
{"level":"error","message":"\nInvalid `prisma.product.create()` invocation:\n\n\nError occurred during query execution:\nConnectorError(ConnectorError { user_facing_error: None, kind: QueryError(PostgresError { code: \"0A000\", message: \"cached plan must not change result type\", severity: \"ERROR\", detail: None, column: None, hint: None }), transient: false }) \nInvalid `prisma.product.create()` invocation:\n\n\nError occurred during query execution:\nConnectorError(ConnectorError { user_facing_error: None, kind: QueryError(PostgresError { code: \"0A000\", message: \"cached plan must not change result type\", severity: \"ERROR\", detail: None, column: None, hint: None }), transient: false })","target":"product.create","timestamp":"2025-02-16T01:24:39.195Z"}
{"level":"error","message":"\nInvalid `prisma.product.create()` invocation:\n\n\nError occurred during query execution:\nConnectorError(ConnectorError { user_facing_error: None, kind: QueryError(PostgresError { code: \"0A000\", message: \"cached plan must not change result type\", severity: \"ERROR\", detail: None, column: None, hint: None }), transient: false }) \nInvalid `prisma.product.create()` invocation:\n\n\nError occurred during query execution:\nConnectorError(ConnectorError { user_facing_error: None, kind: QueryError(PostgresError { code: \"0A000\", message: \"cached plan must not change result type\", severity: \"ERROR\", detail: None, column: None, hint: None }), transient: false })","target":"product.create","timestamp":"2025-02-16T01:25:16.247Z"}
{"level":"error","message":"\nInvalid `prisma.product.create()` invocation:\n\n\nThe column `onCreate` does not exist in the current database. \nInvalid `prisma.product.create()` invocation:\n\n\nThe column `onCreate` does not exist in the current database.","target":"product.create","timestamp":"2025-02-16T01:27:34.923Z"}
{"level":"error","message":"\nInvalid `prisma.product.create()` invocation:\n\n\nThe column `onCreate` does not exist in the current database. \nInvalid `prisma.product.create()` invocation:\n\n\nThe column `onCreate` does not exist in the current database.","target":"product.create","timestamp":"2025-02-16T01:28:06.014Z"}
{"level":"error","message":"\nInvalid `prisma.product.create()` invocation:\n\n{\n  data: {\n    storeId: \"6e3aa644-99ab-4598-8758-5ac74e422293\",\n    name: \"product 1\",\n    description: \"Description not provided\",\n    price: 10000,\n+   stock: Int\n  }\n}\n\nArgument `stock` is missing. \nInvalid `prisma.product.create()` invocation:\n\n{\n  data: {\n    storeId: \"6e3aa644-99ab-4598-8758-5ac74e422293\",\n    name: \"product 1\",\n    description: \"Description not provided\",\n    price: 10000,\n+   stock: Int\n  }\n}\n\nArgument `stock` is missing.","target":"product.create","timestamp":"2025-02-16T01:32:33.047Z"}
{"level":"error","message":"\nInvalid `prisma.product.create()` invocation:\n\n\nForeign key constraint violated: `Product_storeId_fkey (index)` \nInvalid `prisma.product.create()` invocation:\n\n\nForeign key constraint violated: `Product_storeId_fkey (index)`","target":"product.create","timestamp":"2025-02-16T01:34:17.277Z"}
